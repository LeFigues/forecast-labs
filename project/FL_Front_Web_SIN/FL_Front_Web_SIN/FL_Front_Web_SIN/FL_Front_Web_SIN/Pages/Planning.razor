@page "/planning"
@using FL_Front_Web_SIN.Models
@inject PlanningService PlanningService

<h1>🗕️ Planificación de Laboratorio</h1>

<button class="btn btn-primary mb-3" @onclick="MostrarFormulario">
    ➕ Nueva planificación
</button>

@if (mostrarFormulario)
{
    <div class="plan-form">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-warning">@errorMessage</div>
        }

        <div class="form-group">
            <label>🎓 Carrera</label>
            <select class="form-control" @onchange="OnCareerChanged">
                <option value="">Seleccionar carrera</option>
                @foreach (var career in careers)
                {
                    <option value="@career.Id">@career.Name</option>
                }
            </select>
        </div>

        @if (subjects.Any())
        {
            <div class="form-group mt-2">
                <label>📚 Materia</label>
                <select class="form-control" @onchange="OnSubjectChanged">
                    <option value="">Seleccionar materia</option>
                    @foreach (var subj in subjects)
                    {
                        <option value="@subj.Id">@subj.Name</option>
                    }
                </select>
            </div>
        }

        @if (groups.Any())
        {
            <div class="form-group mt-2">
                <label>👥 Grupo</label>
                <select class="form-control" @onchange="OnGroupChanged">
                    <option value="">Seleccionar grupo</option>
                    @foreach (var grp in groups)
                    {
                        <option value="@grp.Id">@grp.Name</option>
                    }
                </select>
            </div>
        }

        <div class="form-group mt-2">
            <label>🗓 Fecha</label>
            <InputDate class="form-control" @bind-Value="plan.Fecha" />
        </div>

        <div class="form-group">
            <label>⏰ Hora</label>
            <InputText class="form-control" @bind-Value="plan.HoraStr" type="time" />
        </div>

        <div class="form-group">
            <label>🏫 Aula</label>
            <InputText class="form-control" @bind-Value="plan.Aula" />
        </div>

        <div class="form-group">
            <label>👨‍🏫 Docente</label>
            <InputText class="form-control" @bind-Value="plan.Docente" />
        </div>

        <div class="form-group">
            <label>📦 Materiales</label>
            <InputTextArea class="form-control" rows="3" @bind-Value="plan.Materiales" />
        </div>

        <div class="form-group">
            <label>👨‍🎓 Cantidad de Estudiantes</label>
            <InputNumber class="form-control" @bind-Value="plan.CantidadAlumnos" Disabled />
        </div>

        @if (students.Any())
        {
            <div class="mt-4">
                <h5>👥 Lista de Estudiantes:</h5>
                <ul class="list-group">
                    @foreach (var student in students)
                    {
                        <li class="list-group-item">@($"{student.FirstName} {student.LastName}")</li>
                    }
                </ul>
            </div>
        }

        <button class="btn btn-success mt-3" @onclick="RegistrarPlanificacion">Registrar planificación</button>
        <button class="btn btn-secondary mt-2 ms-2" @onclick="OcultarFormulario">Cancelar</button>
    </div>
}

@code {
    private List<Career> careers = new();
    private List<Subject> subjects = new();
    private List<SGroup> groups = new();
    private List<Student> students = new();
    private bool mostrarFormulario = false;
    private string errorMessage = "";

    private int selectedCareerId;
    private int selectedSubjectId;
    private int selectedGroupId;
    private PlanificacionForm plan = new();

    protected override async Task OnInitializedAsync()
    {
        careers = await PlanningService.GetCareersAsync();
    }

    private async Task OnCareerChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var careerId))
        {
            selectedCareerId = careerId;
            var career = careers.FirstOrDefault(c => c.Id == careerId);
            plan.Carrera = career?.Name ?? "";

            subjects = career?.Subjects ?? new List<Subject>();
            groups = new();
            students = new();
            plan.Materia = "";
            plan.Grupo = "";
            plan.CantidadAlumnos = 0;
        }
    }

    private async Task OnSubjectChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var subjectId))
        {
            selectedSubjectId = subjectId;
            var subject = subjects.FirstOrDefault(s => s.Id == subjectId);
            plan.Materia = subject?.Name ?? "";

            groups = await PlanningService.GetGroupsBySubjectAsync(subjectId);
            students = new();
            plan.Grupo = "";
            plan.CantidadAlumnos = 0;
        }
    }

    private async Task OnGroupChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var groupId))
        {
            selectedGroupId = groupId;
            var group = groups.FirstOrDefault(g => g.Id == groupId);
            plan.Grupo = group?.Name ?? "";

            students = await PlanningService.GetStudentsByGroupAsync(groupId);
            plan.CantidadAlumnos = students.Count;
        }
    }

    private void MostrarFormulario()
    {
        plan = new PlanificacionForm();
        mostrarFormulario = true;
        errorMessage = "";
    }

    private void OcultarFormulario()
    {
        mostrarFormulario = false;
        errorMessage = "";
    }

    private void RegistrarPlanificacion()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(plan, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        Console.WriteLine("Planificación registrada:");
        Console.WriteLine(json);
    }
}
